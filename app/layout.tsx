// import type { Metadata } from "next";
// import localFont from "next/font/local";
// import "./globals.css";

// const geistSans = localFont({
//   src: "./fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "./fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }






// "use client";

// import "./globals.css"; // Import global styles
// import { usePathname } from "next/navigation";
// import DashboardLayout from "./dashboard/DashboardLayout";
// import { AuthProvider } from "./context/AuthContext";
// import { DrawerProvider } from "./dashboard/DrawerContext";
// import { useEffect, useState } from "react";


// interface Props {
//   children: React.ReactNode;
// }

// export default function RootLayout({ children }: Props) {
//   const pathname = usePathname();

  
//   if (pathname.startsWith("/admin")) {
//     return (
//       <html lang="en">
//         {/* Required html tag */}
//         <body>
//           {/* Required body tag */}
//                <AuthProvider>
//        <DrawerProvider>
//           <DashboardLayout>{children}</DashboardLayout>
//           </DrawerProvider>
//           </AuthProvider>
//         </body>
//       </html>
//     );
//   }

//   return (
//     <html lang="en">
//       {/* Required html tag */}
//       <body>
//         {/* Required body tag */}
//         {children}
//       </body>
//     </html>
//   );
// }










// // 'use client';


// // import { ThemeProvider } from "next-themes"; // Import ThemeProvider
// // import "./globals.css"; // Import global styles
// // import { usePathname } from "next/navigation";
// // import DashboardLayout from "./dashboard/DashboardLayout";
// // import { AuthProvider } from "./context/AuthContext";
// // import { DrawerProvider } from "./dashboard/DrawerContext";
// // import { useEffect, useState } from "react";

// // interface Props {
// //   children: React.ReactNode;
// // }

// // export default function RootLayout({ children }: Props) {
// //   const pathname = usePathname();
// //   const [mounted, setMounted] = useState(true);

// //   useEffect(() => {
// //     // Set mounted to true after the component has mounted on the client
// //     setMounted(true);
// //   }, []);

// //   // Render nothing until the client is mounted
// //   if (!mounted) return null;

// //   return (
// //     <html lang="en">
// //       <body>
// //       <AuthProvider>
// //       <DrawerProvider>
// //           {/* Conditional rendering based on the pathname */}
// //           {pathname.startsWith("/admin") ? (
            
// //             <DashboardLayout>{children}</DashboardLayout>
            
// //           ) : (
// //             children
// //           )}
// //           </DrawerProvider>
// //           </AuthProvider>
// //       </body>
      
// //     </html>
      
// //   );
// // }










'use client';


import { ThemeProvider } from "next-themes"; // Import ThemeProvider
import "./globals.css"; // Import global styles
import { usePathname } from "next/navigation";
import DashboardLayout from "./dashboard/DashboardLayout";
import { AuthProvider } from "./context/AuthContext";
import { DrawerProvider } from "./dashboard/DrawerContext";

interface Props {
  children: React.ReactNode;
}

export default function RootLayout({ children }: Props) {
  const pathname = usePathname();
  // console.log('Current pathname:', pathname);

  return (
    <html lang="en">
      <body>
      <AuthProvider>
      <DrawerProvider>
          {/* Conditional rendering based on the pathname */}
          {pathname.startsWith("/admin") ? (
            
            <DashboardLayout>{children}</DashboardLayout>
            
          ) : (
            children
          )}
          </DrawerProvider>
          </AuthProvider>
      </body>
      
    </html>
      
  );
}